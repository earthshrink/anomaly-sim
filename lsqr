#!/usr/bin/env python
"""A tool to compare least square fit results across Jupyter notebooks"""

import numpy as np

import pandas as pd

import json
import sys
import re


class Fit:
    """A fit."""

    def __init__(self, file):
        self._file = file
        self._data = None
        self._context = None
        self._params = {
            'a': None,
            'ecc': None,
            'inc': None,
            'nu': None,
            'raan': None,
            'argp': None,
        }
        self._unchanged = {
            'a': False,
            'ecc': False,
            'inc': False,
            'nu': False,
            'raan': False,
            'argp': False,
        }

    def __str__(self):
        return "\t".join([ str(x) for x in (pd.json_normalize(self.__dict__, sep='_').to_dict(orient='records')[0]).values() ])

    def names(self):
        return "\t".join([ str(x) for x in (pd.json_normalize(self.__dict__, sep='_').to_dict(orient='records')[0]).keys() ])

class Lsq:
    """Purveyor of text comments"""

    def __init__(self):
        self._iter_re = re.compile('(\-?\d+)\. (\-?\d+\.\d+) (\{[^}]+\})')
        self._init_re = re.compile('^\s*(\w+):\s*at initial value')
        self._var_re = re.compile('^\s*(\w+):\s*(-?\d+\.\d+) \(init = (-?\d+\.?\d*)\)\s*$')
        #self._fit_re = re.compile('.*(\w+fit\w+)\(.*, (\w+data\w+), \"([^"]*)\"\)')
        self._fit_re = re.compile('(\w*fit\w*)\(')
        self._fit_data_re = re.compile('(\w*data\w*),')
        self._fit_context_re = re.compile('"([^"]+)"')

        self._current_file = None
        self._fits = []

    def report(self):
        print(self._fits[0].names())
        for f in self._fits:
            print(f)

    def parse_fit(self, lines):

        fit = None
        for l in lines:
            if l.startswith('[[Fit Statistics'):
                fit = Fit(self._current_file)
                self._fits.append(fit)
                continue

            m = self._init_re.match(l)
            if m and fit:
                fit._unchanged[m.group(1)] = True
                continue

            m = self._var_re.match(l)
            if m and fit:
                fit._params[m.group(1)] = float(m.group(2))
                continue

        return fit

    def parse_context(self, fit, lines):
        for l in lines:
            m = self._fit_re.search(l)
            if m and fit:

                m1 = self._fit_data_re.search(l)
                if m1:
                    fit._data = m1.group(1)

                m2 = self._fit_context_re.search(l)
                if m2:
                    fit._context = m2.group(1)

    def parse(self, file):
        try:
            with open(file) as f:
                j = json.load(f)

        except IsADirectoryError as e:
            return

        except ValueError as e:
            return

        self._current_file = file
        fit = None
        for c in j['cells']:
            if c['cell_type'] == 'code':
                if 'outputs' in c:
                    for output in c['outputs']:
                        if 'text' not in output:
                            continue
                        fit = self.parse_fit(output['text'])
                if 'source' in c:
                    self.parse_context(fit, c['source'])


def main(files):
    fit = Lsq()
    for f in files:
        fit.parse(f)
    fit.report()
    pass

if __name__ == "__main__":
    main(sys.argv[1:])

# end
